// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.org.intersect.sydma.webapp.domain;

import au.org.intersect.sydma.webapp.domain.PublicAccessRight;
import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;

privileged aspect PublicAccessRight_Roo_Entity {
    
    declare @type: PublicAccessRight: @Entity;
    
    @PersistenceContext(unitName = "sydmaPU")
    transient EntityManager PublicAccessRight.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long PublicAccessRight.id;
    
    @Version
    @Column(name = "version")
    private Integer PublicAccessRight.version;
    
    public Long PublicAccessRight.getId() {
        return this.id;
    }
    
    public void PublicAccessRight.setId(Long id) {
        this.id = id;
    }
    
    public Integer PublicAccessRight.getVersion() {
        return this.version;
    }
    
    public void PublicAccessRight.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional("sydmaPU")
    public void PublicAccessRight.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional("sydmaPU")
    public void PublicAccessRight.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            PublicAccessRight attached = PublicAccessRight.findPublicAccessRight(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional("sydmaPU")
    public void PublicAccessRight.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional("sydmaPU")
    public void PublicAccessRight.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional("sydmaPU")
    public PublicAccessRight PublicAccessRight.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        PublicAccessRight merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager PublicAccessRight.entityManager() {
        EntityManager em = new PublicAccessRight().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long PublicAccessRight.countPublicAccessRights() {
        return entityManager().createQuery("SELECT COUNT(o) FROM PublicAccessRight o", Long.class).getSingleResult();
    }
    
    public static List<PublicAccessRight> PublicAccessRight.findAllPublicAccessRights() {
        return entityManager().createQuery("SELECT o FROM PublicAccessRight o", PublicAccessRight.class).getResultList();
    }
    
    public static PublicAccessRight PublicAccessRight.findPublicAccessRight(Long id) {
        if (id == null) return null;
        return entityManager().find(PublicAccessRight.class, id);
    }
    
    public static List<PublicAccessRight> PublicAccessRight.findPublicAccessRightEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM PublicAccessRight o", PublicAccessRight.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}

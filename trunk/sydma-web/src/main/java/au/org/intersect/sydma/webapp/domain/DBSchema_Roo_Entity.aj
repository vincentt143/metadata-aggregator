// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.org.intersect.sydma.webapp.domain;

import au.org.intersect.sydma.webapp.domain.DBSchema;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DBSchema_Roo_Entity {
    
    declare @type: DBSchema: @Entity;
    
    @PersistenceContext(unitName = "sydmaPU")
    transient EntityManager DBSchema.entityManager;
    
    @Version
    @Column(name = "version")
    private Integer DBSchema.version;
    
    public Integer DBSchema.getVersion() {
        return this.version;
    }
    
    public void DBSchema.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional("sydmaPU")
    public void DBSchema.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional("sydmaPU")
    public void DBSchema.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            DBSchema attached = DBSchema.findDBSchema(this.name);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional("sydmaPU")
    public void DBSchema.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional("sydmaPU")
    public void DBSchema.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional("sydmaPU")
    public DBSchema DBSchema.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        DBSchema merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager DBSchema.entityManager() {
        EntityManager em = new DBSchema().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long DBSchema.countDBSchemas() {
        return entityManager().createQuery("SELECT COUNT(o) FROM DBSchema o", Long.class).getSingleResult();
    }
    
    public static List<DBSchema> DBSchema.findAllDBSchemas() {
        return entityManager().createQuery("SELECT o FROM DBSchema o", DBSchema.class).getResultList();
    }
    
    public static DBSchema DBSchema.findDBSchema(String name) {
        if (name == null || name.length() == 0) return null;
        return entityManager().find(DBSchema.class, name);
    }
    
    public static List<DBSchema> DBSchema.findDBSchemaEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM DBSchema o", DBSchema.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}

// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.org.intersect.sydma.webapp.domain;

import au.org.intersect.sydma.webapp.domain.PermissionEntry;
import au.org.intersect.sydma.webapp.domain.User;
import java.lang.String;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect PermissionEntry_Roo_Finder {
    
    public static TypedQuery<PermissionEntry> PermissionEntry.findPermissionEntrysByPathEqualsAndUser(String path, User user) {
        if (path == null || path.length() == 0) throw new IllegalArgumentException("The path argument is required");
        if (user == null) throw new IllegalArgumentException("The user argument is required");
        EntityManager em = PermissionEntry.entityManager();
        TypedQuery<PermissionEntry> q = em.createQuery("SELECT o FROM PermissionEntry AS o WHERE o.path = :path  AND o.user = :user", PermissionEntry.class);
        q.setParameter("path", path);
        q.setParameter("user", user);
        return q;
    }
    
    public static TypedQuery<PermissionEntry> PermissionEntry.findPermissionEntrysByPathLikeAndUser(String path, User user) {
        if (path == null || path.length() == 0) throw new IllegalArgumentException("The path argument is required");
        path = path.replace('*', '%');
        if (path.charAt(0) != '%') {
            path = "%" + path;
        }
        if (path.charAt(path.length() - 1) != '%') {
            path = path + "%";
        }
        if (user == null) throw new IllegalArgumentException("The user argument is required");
        EntityManager em = PermissionEntry.entityManager();
        TypedQuery<PermissionEntry> q = em.createQuery("SELECT o FROM PermissionEntry AS o WHERE LOWER(o.path) LIKE LOWER(:path)  AND o.user = :user", PermissionEntry.class);
        q.setParameter("path", path);
        q.setParameter("user", user);
        return q;
    }
    
    public static TypedQuery<PermissionEntry> PermissionEntry.findPermissionEntrysByUser(User user) {
        if (user == null) throw new IllegalArgumentException("The user argument is required");
        EntityManager em = PermissionEntry.entityManager();
        TypedQuery<PermissionEntry> q = em.createQuery("SELECT o FROM PermissionEntry AS o WHERE o.user = :user", PermissionEntry.class);
        q.setParameter("user", user);
        return q;
    }
    
}

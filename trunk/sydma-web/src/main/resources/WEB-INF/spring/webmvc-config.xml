<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

        <context:property-placeholder location="file://${dms.config.home}/applicationType.properties" />

	<!-- The controllers are autodetected POJOs labeled with the @Controller 
		annotation. -->
	<context:component-scan base-package="au.org.intersect" use-default-filters="false">
		<context:include-filter expression="org.springframework.stereotype.Controller" type="annotation"/>
                ${filter.context.end}
		<context:exclude-filter expression="au.org.intersect.sydma.webapp.controller.DC2D" type="annotation"/>
                ${filter.context.start}
	</context:component-scan>
    

	<!-- Turns on support for mapping requests to Spring MVC @Controller methods 
		Also registers default Formatters and Validators for use across all @Controllers -->
    <mvc:annotation-driven conversion-service="conversionService"/>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources -->
	<mvc:resources location="/, classpath:/META-INF/web-resources/" mapping="/resources/**"/>

	<!-- Allows for mapping the DispatcherServlet to "/" by forwarding static 
		resource requests to the container's default Servlet -->
	<mvc:default-servlet-handler/>

	<!-- register "global" interceptor beans to apply to all registered HandlerMappings -->
	<mvc:interceptors>
		<bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor"/>
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" p:paramName="lang"/>
		<bean class="au.org.intersect.sydma.webapp.filter.ExternalUserPermissionFilter" />
                <bean id="webContentInterceptor" class="org.springframework.web.servlet.mvc.WebContentInterceptor">
                        <property name="cacheSeconds" value="0" />
                        <property name="useExpiresHeader" value="true" />
                        <property name="useCacheControlHeader" value="true" />
                        <property name="useCacheControlNoStore" value="true" />
                        <property name="cacheMappings">
                            <props>
                                <prop key="/resources/**">3600</prop>
                            </props>
                        </property>
                </bean>
	</mvc:interceptors>

	<!-- selects a static view for rendering without the need for an explicit 
		controller -->
	<mvc:view-controller path="/advertising/unadvertiseconfirm"/>
    <mvc:view-controller path="/permission/permissionlevel"/>
    <mvc:view-controller path="/admin/index"/>
    <mvc:view-controller path="/login"/>
    <mvc:view-controller path="/" view-name=""/>
	<mvc:view-controller path="/uncaughtException"/>
	<mvc:view-controller path="/resourceNotFound"/>
	<mvc:view-controller path="/accessDenied"/>
	<mvc:view-controller path="/dataAccessFailure"/>
    <mvc:view-controller path="/solrServerException"/>
    <mvc:view-controller path="researchDatasetDBException"/>
    <mvc:view-controller path="noEntityFoundException"/>
       
   
    <bean id="fileTreeController" class="au.org.intersect.sydma.webapp.controller.FileTreeController">
        <constructor-arg name="applicationTypeService" ref="applicationType"/>
    </bean>
    
    <bean id="transferWizardController" class="au.org.intersect.sydma.webapp.controller.TransferWizardController">
        <constructor-arg name="applicationTypeService" ref="applicationType"/>
    </bean>
    
	<!-- Resolves localized messages*.properties and application.properties 
		files in the application to allow for internationalization. The messages*.properties 
		files translate Roo generated messages which are part of the admin interface, 
		the application.properties resource bundle localizes all application specific 
		messages such as entity names and menu items. -->
	<bean class="org.springframework.context.support.ReloadableResourceBundleMessageSource" id="messageSource" p:basenames="WEB-INF/i18n/messages,WEB-INF/i18n/application,classpath:revision" p:fallbackToSystemLocale="true"/>

	<!-- store preferred language configuration in a cookie -->
	<bean class="org.springframework.web.servlet.i18n.CookieLocaleResolver" id="localeResolver" p:cookieName="locale"/>

	<!-- resolves localized <theme_name>.properties files in the classpath to 
		allow for theme support -->
        <bean class="au.org.intersect.sydma.webapp.util.SydmaSimpleTheme" id="themeSource">
            <property name="messageSource">
               <bean class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
                     p:basename="file://${dms.config.home}/${application.base.theme}" p:fallbackToSystemLocale="true" 
                     p:cacheSeconds="${application.theme.cache.secs}" />
            </property>
        </bean>

	<!-- bean class="org.springframework.ui.context.support.ResourceBundleThemeSource" id="themeSource" p:basenamePrefix="file://${dms.config.home}/" / -->

	<bean class="au.org.intersect.sydma.webapp.util.SydmaThemeResolver" id="themeResolver" />
    

    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver" p:order="1"/>
      
	<!-- This bean resolves specific types of exceptions to corresponding logical 
		- view names for error views. The default behaviour of DispatcherServlet 
		- is to propagate all exceptions to the servlet container: this will happen 
		- here with all other types of exceptions. -->
		
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" p:defaultErrorView="uncaughtException" p:order="2">
		<property name="exceptionMappings">
			<props>
				<prop key=".DataAccessException">dataAccessFailure</prop>
				<prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop>
				<prop key=".TypeMismatchException">resourceNotFound</prop>
				<prop key=".MissingServletRequestParameterException">resourceNotFound</prop>
                <prop key=".ResearchDatasetDBException">researchDatasetDBException</prop>
				<prop key=".EmptyResultDataAccessException">noEntityFoundException</prop>
				<prop key=".SolrServerException">solrServerException</prop>
			</props>
		</property>
	</bean>
  
	<!-- allows for integration of file upload functionality -->
	<bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver"/>
    <!-- 
	<bean class="org.springframework.web.servlet.view.UrlBasedViewResolver" id="tilesViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
	</bean>
     -->
	<bean class="org.springframework.web.servlet.view.tiles2.TilesConfigurer" id="tilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/layouts/layouts.xml</value>                 
				<!-- Scan views directory for Tiles configurations -->
				<value>/WEB-INF/views/**/views.xml</value>
			</list>
		</property>
	</bean>
<!-- Uncomment for ajax view --> 
    <bean id="tilesViewResolver" class="org.springframework.js.ajax.AjaxUrlBasedViewResolver">
        <property name="viewClass" value="org.springframework.js.ajax.tiles2.AjaxTilesView"/>
    </bean>
 <!-- -->
    <!-- Auto Conversion of object types -->    
	<bean class="org.springframework.format.support.FormattingConversionServiceFactoryBean" id="conversionService">
		<property name="converters">
			<list>
				<bean class="au.org.intersect.sydma.webapp.converter.StringToUniKeyConverter"/>
				<bean class="au.org.intersect.sydma.webapp.converter.UniKeyToStringConverter"/>
			</list>
		</property>
	</bean>
</beans>

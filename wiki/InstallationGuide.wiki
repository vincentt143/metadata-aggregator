#summary Installation Guide


= Installing Application Requirements = 
 
This installion guide assumes you are installing on a clean CentOS 6 server (or similar Linux distribution) and therefore includes the installion of every tool and package you will need to setup and run the application.

Firstly we will install the Oracle java jdk 1.6 package.

On your local machine download the oracle java jdk 1.6 linux bin file from the oracle website

[http://www.oracle.com/technetwork/java/javase/downloads/jdk6downloads-1902814.html]

Then ssh into the server you wish to deploy to with the following command:
{{{
ssh [username]@[server name]
}}}

and run:
{{{
$ sudo su - 
$ yum install openssh-clients
}}}

In a seperate bash tab, locally run:
{{{
$ scp [download location]/jdk-6u[version]-linux-x64-rpm.bin [username]@[server name you are deploying to]:~
}}}

Close the local tab. Then back in the ssh session run:
{{{
$ chmod a+x jdk-6u[version]-linux-x64-rpm.bin
$ ./jdk-6u[version]-linux-x64-rpm.bin
}}}

{{{
$ alternatives --install /usr/bin/java java /usr/java/jdk1.6.0_[version]/jre/bin/java 20000
$ alternatives --install /usr/bin/javaws javaws /usr/java/jdk1.6.0_[version]/jre/bin/javaws 20000
$ alternatives --install /usr/bin/javac javac /usr/java/jdk1.6.0_[version]/bin/javac 20000
$ alternatives --install /usr/bin/jarsigner jarsigner /usr/java/jdk1.6.0_[version]/bin/jarsigner 20000
$ alternatives --install /usr/bin/jar jar /usr/java/jdk1.6.0_[version]/bin/jar 20000 
}}}


Now that Java is installed next we will setup MySQL
{{{
$ yum install mysql mysql-server
}}}

Set the MySQL service to start on boot
{{{
$ chkconfig --level 2345 mysqld on; service mysqld start
}}}

Start the MySQL service
{{{
$ service mysqld start
}}}

Log into MySQL
{{{
mysql -u root
}}}

Install Apache Tomcat 6
{{{
$ yum -y install tomcat6 tomcat6-webapps tomcat6-admin-webapps
}}}

You need to config Tomcat. These instructions assume that Tomcat installed in the default location of /usr/share/tomcat6

{{{
$ vi /etc/tomcat6/tomcat6.conf
}}}

Add the following lines to the config file below the existing JAVA_OPTS.

{{{
JAVA_OPTS="${JAVA_OPTS} -Ddms.config.home=/usr/share/tomcat6/mda-data/dms.home"
JAVA_OPTS="${JAVA_OPTS} -Dsolr.solr.home=/usr/share/tomcat6/mda-data/solr"
JAVA_OPTS="${JAVA_OPTS} -XX:MaxPermSize=256m -XX:+CMSClassUnloadingEnabled -Xmx1024m -Xms512m"
}}}

Now we are ready to download the source code for this application
{{{
$ cd ~
$ mkdir code
$ cd code
$ yum install svn unzip
$ svn checkout http://metadata-aggregator.googlecode.com/svn/trunk/ metadata-aggregator-read-only
$ svn checkout http://ammrf-dms.googlecode.com/svn/trunk/sdms sdms-read-only
}}}

Now install Apache Solr:
{{{
$ cd ~
$ wget http://archive.apache.org/dist/lucene/solr/3.1.0/apache-solr-3.1.0.tgz
$ tar xfz apache-solr-3.1.0.tgz

$ mkdir /usr/share/tomcat6/webapps/solr
$ cd /usr/share/tomcat6/webapps/solr
$ unzip ~/apache-solr-3.1.0/dist/apache-solr-3.1.0.war

$ mkdir /usr/share/tomcat6/mda-data/solr
$ cd /usr/share/tomcat6/mda-data/solr
$ mkdir conf
$ mkdir data
$ cp /home/devel/code/metadata-aggregator-read-only/sydma-install/resource/solr_conf/* conf
$ chown -R tomcat /usr/share/tomcat6/mda-data/solr
$ chown -R tomcat /usr/share/tomcat6/webapps/solr
}}}


Now install JOAI:
{{{
$ cd ~
$ wget --no-check-certificate https://sourceforge.net/projects/dlsciences/files/jOAI%20-%20OAI%20Provider_Harvester/v3.1.1.3/joai_v3.1.1.3.zip
$ yum install unzip
$ unzip joai_v3.1.1.3.zip
$ cd /usr/share/tomcat6/webapps
$ mkdir oai
$ cd oai
$ unzip ~/joai_v3.1.1.3/oai.war
$ chown -R tomcat /usr/share/tomcat6/webapps/oai
$ chkconfig tomcat6 on && service tomcat6 restart
}}}

Install Apache Maven version 2.2.1
{{{
$ wget http://mirror.overthewire.com.au/pub/apache/maven/maven-2/2.2.1/binaries/apache-maven-2.2.1-bin.tar.gz
$ tar xzf apache-maven-2.2.1-bin.tar.gz -C /usr/local
$ cd /usr/local
$ ln -s apache-maven-2.2.1 maven 
$ vi /etc/profile.d/maven.sh
}}}
Write these lines into the vi input
{{{
export M2_HOME=/usr/local/maven
export PATH=${M2_HOME}/bin:${PATH}
}}}

Exit the editor by entering :wq and then check that mvn is installed correctly by entering
{{{
$ source /etc/profile.d/maven.sh
$ mvn -version
}}}

If you would like to run our mock wasm service to simulate the logging in process you need to do the following:
{{{
$ cd ~
$ wget http://dist.groovy.codehaus.org/distributions/groovy-binary-2.1.1.zip
$ unzip groovy-binary-2.1.1.zip
$ export GROOVY_HOME="~/groovy-2.1.1/"
$ export PATH=$PATH:$GROOVY_HOME/bin
$ cd ~/code/metadata-aggregator-read-only/wasm-server/
$ nohup groovy wasmserver.groovy &
$ nohup groovy webserver.groovy &
}}}

Configure the app for deployment
{{{
$ cd /home/devel/code/sdms-read-only/lib
$ ./install.sh
$ cd ..
$ mvn clean
$ mvn install

$ cd ../metadata-aggregator-read-only/lib
$ ./install.sh
$ cd ../sydma-install
}}}

Open the environment script and ensure the paths in there match those of your system (i.e. JAVA_HOME)
{{{
$ vi config/local-dc2f/env.sh
}}}

Now run the installation script that will deploy the app
{{{
$ cd bin
$ ./qa-installer.sh -h local-dc2f -b
}}}

Switch off selinux
{{{
$ setenforce 0
}}}

And finally, configure the system's iptable to allow connections on port 8080
{{{
$ vi /etc/sysconfig/iptables
}}}
Insert the following line
{{{
-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT
}}}

Then restart the iptables service
{{{
$ service iptables restart
}}}


  
  
  